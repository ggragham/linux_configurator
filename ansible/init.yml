---
- name: Init configuration
  hosts: localhost

  vars_files:
    - _vars_base.yml
    - _vars_firmware_pkgs.yml
    - '{{ repo_root_path }}/default.pkgs.yml'

  pre_tasks:
    - name: Preparatory steps
      block:
        - name: Include pkgs list
          include_vars: '{{ item }}'
          with_fileglob:
            - '{{ repo_root_path }}/pkgs.yml'
      tags: prepare

  tasks:
    - name: Fedora
      block:
        - name: Configure dnf
          block:
            - name: Apply dnf config
              blockinfile:
                block: "{{ lookup('file', '{{ system_conf_path }}/dnf.conf') }}"
                path: /etc/dnf/dnf.conf
            - name: Install python3-libdnf5
              shell:
                cmd: rpm -q python3-libdnf5 || dnf install -y python3-libdnf5
            - name: Disable OpenH264 repo
              shell:
                cmd: |
                  dnf config-manager setopt fedora-cisco-openh264.enabled=0
                  dnf clean all
            - name: Install RPMFusion repo
              dnf:
                name:
                  - https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm
                  - https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm
                state: latest
                update_cache: true
                install_weak_deps: false
                disable_gpg_check: true

        - name: Install firmware
          block:
            - name: Install base firmware pkgs
              dnf:
                name: '{{ fedora_firmware_pkgs }}'
                state: latest
                update_cache: true
                install_weak_deps: false

            - name: Install CPU firmware
              block:
                - name: Install AMD CPU firmware
                  dnf:
                    name: '{{ fedora_amd_cpu_firmware }}'
                    state: latest
                    update_cache: true
                    install_weak_deps: false
                  when: "'AuthenticAMD' in ansible_processor"
                - name: Install Intel CPU firmware
                  dnf:
                    name: '{{ fedora_intel_cpu_firmware }}'
                    state: latest
                    update_cache: true
                    install_weak_deps: false
                  when: "'GenuineIntel' in ansible_processor"
                - name: Warning for unsupported CPU
                  debug:
                    msg: 'CPU: {{ ansible_processor[1] }} is not supported.'
                  when: "'AuthenticAMD' not in ansible_processor and 'GenuineIntel' not in ansible_processor"

            - name: Install GPU firmware
              block:
                - name: Install pciutils
                  dnf:
                    name: pciutils
                    state: latest
                    update_cache: true
                    install_weak_deps: false
                - name: Gather GPU information
                  shell: lspci -nn | grep -i vga
                  register: gpu_info
                - name: Install AMD GPU firmware
                  dnf:
                    name: '{{ fedora_amd_gpu_firmware }}'
                    state: latest
                    update_cache: true
                    install_weak_deps: false
                  when: "'ATI' in gpu_info.stdout or 'Radeon' in gpu_info.stdout"
                - name: Install Intel GPU firmware
                  dnf:
                    name: '{{ fedora_intel_gpu_firmware }}'
                    state: latest
                    update_cache: true
                    install_weak_deps: false
                  when: "'Intel' in gpu_info.stdout"
                - name: Warning for unsupported GPU
                  debug:
                    msg: GPU is not supported.
                  when: "'ATI' not in gpu_info.stdout and 'Radeon' not in gpu_info.stdout and 'Intel' not in gpu_info.stdout and 'NVIDIA' not in gpu_info.stdout"

        - name: Install core pkgs
          dnf:
            name: '{{ fedora_core_pkgs }}'
            state: latest
            update_cache: true
            install_weak_deps: false

        - name: Base configuration
          block:
            - name: Enable gdm
              systemd:
                name: gdm
                enabled: true
            - name: Set graphical.target
              command:
                cmd: systemctl set-default graphical.target
            - name: Set plymouth theme
              command:
                cmd: plymouth-set-default-theme bgrt --rebuild-initrd
            - name: Hide grub on startup
              shell:
                cmd: |
                  grub2-editenv - set menu_auto_hide=1
                  grub2-mkconfig -o /boot/grub2/grub.cfg

        - name: Install base pkgs
          dnf:
            name: '{{ fedora_base_pkgs }}'
            state: latest
            update_cache: true
            install_weak_deps: false

        - name: Make nested BTRFS volumes
          script:
            cmd: '{{ script_path }}/_make_btrfs_subvols.sh {{ item }}'
          environment:
            BACKUP_PATH: '{{ backup_path }}'
          become: false
          with_items: ['{{ home_path }}/.var var']

      become: true
      when: ansible_distribution=="Fedora"
      tags: init

    - name: Debian
      block:
        - name: Generate locales
          locale_gen:
            name: '{{ item }}'
            state: present
          with_items: [en_US.UTF-8, ru_RU.UTF-8, ru_RU.CP1251]

        - name: Configure APT
          block:
            - name: Add backports repository
              apt_repository:
                repo: deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main
                state: present
                filename: backports
            - name: Install software-properties-common
              apt:
                name: [software-properties-common]
                state: latest
                update_cache: true
            - name: enable contrib and non-free repo
              shell:
                cmd: |
                  apt-add-repository -y contrib
                  apt-add-repository -y non-free

        - name: Install firmware
          block:
            - name: Install base firmware pkgs
              apt:
                name: '{{ debian_firmware_pkgs }}'
                state: latest
                update_cache: true
                install_recommends: false

            - name: Install CPU firmware
              block:
                - name: Install AMD CPU firmware
                  apt:
                    name: '{{ debian_amd_cpu_firmware }}'
                    state: latest
                    update_cache: true
                    install_recommends: false
                  when: "'AuthenticAMD' in ansible_processor"
                - name: Install Intel CPU firmware
                  apt:
                    name: '{{ debian_intel_cpu_firmware }}'
                    state: latest
                    update_cache: true
                    install_recommends: false
                  when: "'GenuineIntel' in ansible_processor"
                - name: Warning for unsupported CPU
                  debug:
                    msg: 'CPU: {{ ansible_processor[1] }} is not supported.'
                  when: "'AuthenticAMD' not in ansible_processor and 'GenuineIntel' not in ansible_processor"

            - name: Install GPU firmware
              block:
                - name: Install pciutils
                  apt:
                    name: pciutils
                    state: latest
                    update_cache: true
                    install_recommends: false
                - name: Gather GPU information
                  shell: lspci -nn | grep -i vga
                  register: gpu_info
                - name: Install AMD GPU firmware
                  apt:
                    name: '{{ debian_amd_gpu_firmware }}'
                    state: latest
                    update_cache: true
                    install_recommends: false
                  when: "'ATI' in gpu_info.stdout or 'Radeon' in gpu_info.stdout"
                - name: Configure Intel GPU
                  block:
                    - name: Install Intel GPU firmware
                      apt:
                        name: '{{ debian_intel_gpu_firmware }}'
                        state: latest
                        update_cache: true
                        install_recommends: false
                    - name: Apply Intel xorg config
                      block:
                        - name: Create xorg config dir
                          file:
                            path: /etc/X11/xorg.conf.d
                            state: directory
                            mode: 0755
                        - name: Apply xorg config
                          copy:
                            src: '{{ system_conf_path }}/xorg/{{ item }}.conf'
                            dest: /etc/X11/xorg.conf.d/{{ item }}.conf
                            mode: 0644
                          with_items:
                            - 20-intel
                  when: "'Intel' in gpu_info.stdout"
                - name: Warning for unsupported GPU
                  debug:
                    msg: GPU is not supported.
                  when: "'ATI' not in gpu_info.stdout and 'Radeon' not in gpu_info.stdout and 'Intel' not in gpu_info.stdout and 'NVIDIA' not in gpu_info.stdout"

        - name: Install core pkgs
          apt:
            name: '{{ debian_core_pkgs }}'
            state: latest
            update_cache: true
            install_recommends: false

        - name: Configure grub
          block:
            - name: Hide grub on startup
              lineinfile:
                dest: /etc/default/grub
                regexp: ^GRUB_CMDLINE_LINUX_DEFAULT=
                line: GRUB_CMDLINE_LINUX_DEFAULT="quiet splash raid=noautodetect"
                state: present
            - name: Set default cmdline entries
              lineinfile:
                dest: /etc/default/grub
                regexp: ^GRUB_TIMEOUT=
                line: GRUB_TIMEOUT=0
                state: present
            - name: Update grub config
              command: update-grub

        - name: Configure LightDM
          block:
            - name: Create LightDM config dir
              file:
                path: /etc/lightdm/lightdm.conf.d
                state: directory
                mode: 0755
            - name: Apply LightDM config
              copy:
                src: '{{ system_conf_path }}/lightdm/lightdm.conf'
                dest: /etc/lightdm/lightdm.conf.d/01-default.conf
                mode: 0644
            - name: Apply LightDM config
              copy:
                src: '{{ system_conf_path }}/lightdm/lightdm-gtk-greeter.conf'
                dest: /etc/lightdm/lightdm-gtk-greeter.conf
                mode: 0644

        - name: Config xorg
          block:
            - name: Create xorg config dir
              file:
                path: /etc/X11/xorg.conf.d
                state: directory
                mode: 0755
            - name: Apply xorg config
              copy:
                src: '{{ system_conf_path }}/xorg/{{ item }}.conf'
                dest: /etc/X11/xorg.conf.d/{{ item }}.conf
                mode: 0644
              with_items:
                - 30-touchpad

        - name: Config sysctl
          blockinfile:
            block: "{{ lookup('file', '{{ system_conf_path }}/sysctl.conf') }}"
            path: /etc/sysctl.d/99-sysctl.conf

        - name: Install base pkgs to Debian
          block:
            - name: Install Debian base pkgs [1/2]
              apt:
                name: '{{ debian_base_p1_pkgs }}'
                state: latest
                update_cache: true
            - name: Install Debian base pkgs [2/2]
              apt:
                name: '{{ debian_base_p2_pkgs }}'
                state: latest
                update_cache: true
                install_recommends: false

        - name: Enable TLP
          block:
            - name: Check if TLP package is installed
              package_facts:
            - name: Enable TLP
              service:
                name: tlp
                state: started
                enabled: true
              when: "'tlp' in ansible_facts.packages"

      become: true
      when: ansible_distribution=="Debian"
      tags: init
